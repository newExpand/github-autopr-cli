# PR Review Bot Workflow
name: PR Review Bot

on:
  pull_request:
    types: [opened, synchronize]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]

# 명시적으로 권한 설정 강화
permissions:
  contents: read
  pull-requests: write
  issues: write
  id-token: write # OIDC 인증에 필요한 권한 추가

jobs:
  review:
    runs-on: ubuntu-latest
    # issue_comment 이벤트가 PR 관련 댓글인 경우에만 실행
    # pull_request_review_comment 이벤트에서는 리뷰의 일부가 아닐 때만 실행
    # pull_request_review_comment와 pull_request_review가 동시에 발생한 경우 하나만 처리
    if: |
      (github.event_name != 'issue_comment') ||
      (github.event_name == 'issue_comment' && github.event.issue.pull_request)

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Debug Event Info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            echo "Comment author: ${{ github.event.comment.user.login }}"
            echo "Is bot comment: ${{ contains(github.event.comment.user.login, 'bot') || github.event.comment.user.login == 'github-actions[bot]' }}"
          fi
          if [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            echo "Is part of review: ${{ github.event.pull_request_review != null }}"
            echo "Comment ID: ${{ github.event.comment.id }}"
          fi
          if [[ "${{ github.event_name }}" == "pull_request_review" ]]; then
            echo "Review ID: ${{ github.event.review.id }}"
            # 리뷰 답글임을 확인하기 위한 로그
            echo "Review body: ${{ github.event.review.body }}"
          fi

      # 중복 응답 방지: review_comment 이벤트 처리 시 동일한 내용의 review 이벤트는 무시
      - name: Check for duplicated event
        id: check-duplicate
        run: |
          is_duplicate="false"

          # pull_request_review_comment 이벤트 이후 동일한 내용으로 pull_request_review 이벤트가 발생하는 경우
          # 또는 그 반대의 경우를 체크
          if [[ "${{ github.event_name }}" == "pull_request_review" ]]; then
            # 최근 1분 이내에 이미 review_comment 이벤트가 처리되었는지 체크
            # 코멘트 내용이 비슷하다면 중복으로 간주
            echo "is_duplicate=true" >> $GITHUB_OUTPUT
            echo "이벤트가 중복으로 감지됨: pull_request_review는 무시됩니다."
          fi

          if [[ "${{ github.event_name }}" == "pull_request_review_comment" && "${{ github.event.pull_request_review != null }}" == "true" ]]; then
            # 라인 코멘트가 리뷰의 일부인 경우는 pull_request_review 이벤트에서 처리되므로 무시
            echo "is_duplicate=true" >> $GITHUB_OUTPUT
            echo "이벤트가 중복으로 감지됨: 리뷰의 일부인 라인 코멘트는 무시됩니다."
          fi

      # 처리 방식을 이벤트 타입에 따라 분리
      # pull_request 이벤트는 직접 실행
      - name: Run PR Review Bot for pull_request events
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AI_PROVIDER: "openrouter"
        run: npx autopr review-bot

      # 봇이 작성한 코멘트에는 응답하지 않음
      # 다른 이벤트 유형에 대해서는 봇 결과를 저장하고 응답 생성
      # 중복된 이벤트인 경우 실행하지 않음
      - name: Run PR Review Bot and Store Output for comment events
        if: |
          steps.check-duplicate.outputs.is_duplicate != 'true' &&
          github.event_name != 'pull_request' &&
          !((github.event_name == 'issue_comment' && 
            (contains(github.event.comment.user.login, 'bot') || 
             github.event.comment.user.login == 'github-actions[bot]')))
        id: pr-review-bot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AI_PROVIDER: "openrouter"
        run: |
          # 봇 실행하여 응답 생성 - 임시 파일에 저장
          npx autopr review-bot > bot_output.txt

          # 출력 파일이 있는지 확인
          if [ -f bot_output.txt ]; then
            # 디버그 로그가 아닌 마지막 출력 부분만 사용하기
            # AI 응답은 항상 마지막 부분에 출력됩니다
            clean_output=$(cat bot_output.txt | grep -v -E "^\[.*\]" | grep -v "debug" | grep -v "AI 응답을 생성할 수 없습니다" | grep -v -E "^[[:space:]]*$" | tail -5)
            
            # 출력에 내용이 있는지 확인
            if [ -z "$clean_output" ]; then
              # 응답이 없으면 기본 메시지 사용
              clean_output="죄송합니다. 응답을 생성할 수 없습니다. 다시 시도해 주세요."
            fi
            
            # GitHub 출력 변수에 저장
            echo "review_output<<EOF" >> $GITHUB_OUTPUT
            echo "$clean_output" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "review_output=응답을 생성할 수 없습니다." >> $GITHUB_OUTPUT
          fi

          # 디버깅을 위한 출력
          echo "생성된 응답:"
          echo "$clean_output"

      # issue_comment 이벤트인 경우 - 찾아서 업데이트 또는 새로 생성
      - name: Find Existing Comment for issue_comment
        if: github.event_name == 'issue_comment' && github.event.issue.pull_request && steps.check-duplicate.outputs.is_duplicate != 'true'
        uses: peter-evans/find-comment@v2
        id: find-comment-issue
        with:
          issue-number: ${{ github.event.issue.number }}
          comment-author: "github-actions[bot]"
          body-includes: "원본 코멘트 ID: ${{ github.event.comment.id }}"

      - name: Create or Update Comment for issue_comment
        if: github.event_name == 'issue_comment' && github.event.issue.pull_request && steps.check-duplicate.outputs.is_duplicate != 'true'
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.find-comment-issue.outputs.comment-id }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            ${{ steps.pr-review-bot.outputs.review_output }}

            <!-- 원본 코멘트 ID: ${{ github.event.comment.id }} -->
          edit-mode: replace

      # pull_request_review_comment 이벤트인 경우 - 찾아서 업데이트 또는 새로 생성
      - name: Find Existing Comment for review_comment
        if: github.event_name == 'pull_request_review_comment' && github.event.pull_request_review == null && steps.check-duplicate.outputs.is_duplicate != 'true'
        uses: peter-evans/find-comment@v2
        id: find-comment-review
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "라인 코멘트 ID: ${{ github.event.comment.id }}"

      - name: Create or Update Comment for review_comment
        if: github.event_name == 'pull_request_review_comment' && github.event.pull_request_review == null && steps.check-duplicate.outputs.is_duplicate != 'true'
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.find-comment-review.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **${{ github.event.comment.user.login }}님의 코드 리뷰 코멘트에 대한 응답:**

            > ${{ github.event.comment.body }}

            ${{ steps.pr-review-bot.outputs.review_output }}

            <!-- 라인 코멘트 ID: ${{ github.event.comment.id }} -->
          edit-mode: replace

      # pull_request_review 이벤트인 경우 - 중복 감지 시 무시
      - name: Find Existing Comment for review
        if: github.event_name == 'pull_request_review' && steps.check-duplicate.outputs.is_duplicate != 'true'
        uses: peter-evans/find-comment@v2
        id: find-comment-pr-review
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "리뷰 ID: ${{ github.event.review.id }}"

      - name: Create or Update Comment for review
        if: github.event_name == 'pull_request_review' && steps.check-duplicate.outputs.is_duplicate != 'true'
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.find-comment-pr-review.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ${{ steps.pr-review-bot.outputs.review_output }}

            <!-- 리뷰 ID: ${{ github.event.review.id }} -->
          edit-mode: replace
