# PR Review Bot Workflow
name: PR Review Bot

on:
  pull_request:
    types: [opened, synchronize]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]

# 명시적으로 권한 설정 강화
permissions:
  contents: read
  pull-requests: write
  issues: write
  id-token: write # OIDC 인증에 필요한 권한 추가

jobs:
  review:
    runs-on: ubuntu-latest
    # issue_comment 이벤트가 PR 관련 댓글인 경우에만 실행
    # pull_request_review_comment 이벤트에서는 리뷰의 일부가 아닐 때만 실행
    if: |
      (github.event_name != 'issue_comment') ||
      (github.event_name == 'issue_comment' && github.event.issue.pull_request)

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Debug Event Info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            echo "Comment author: ${{ github.event.comment.user.login }}"
            echo "Is bot comment: ${{ contains(github.event.comment.user.login, 'bot') || github.event.comment.user.login == 'github-actions[bot]' }}"
          fi
          if [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            echo "Is part of review: ${{ github.event.pull_request_review != null }}"
          fi

      # 봇이 작성한 코멘트에는 응답하지 않음
      # PR 리뷰 봇 실행 및 결과 저장
      - name: Run PR Review Bot and Store Output
        if: |
          !((github.event_name == 'issue_comment' && 
            (contains(github.event.comment.user.login, 'bot') || 
             github.event.comment.user.login == 'github-actions[bot]')) ||
           (github.event_name == 'pull_request_review_comment' && 
            github.event.pull_request_review != null))
        id: pr-review-bot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AI_PROVIDER: "openrouter"
        run: |
          # 봇 실행 결과를 파일로 저장
          output=$(npx autopr review-bot)
          echo "$output" > review_output.txt
          echo "::set-output name=review_output::$(cat review_output.txt)"

      # issue_comment 이벤트인 경우 - 찾아서 업데이트 또는 새로 생성
      - name: Find Existing Comment for issue_comment
        if: github.event_name == 'issue_comment' && github.event.issue.pull_request
        uses: peter-evans/find-comment@v2
        id: find-comment-issue
        with:
          issue-number: ${{ github.event.issue.number }}
          comment-author: "github-actions[bot]"
          body-includes: "원본 코멘트 ID: ${{ github.event.comment.id }}"

      - name: Create or Update Comment for issue_comment
        if: github.event_name == 'issue_comment' && github.event.issue.pull_request
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.find-comment-issue.outputs.comment-id }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            @${{ github.event.comment.user.login }} ${{ steps.pr-review-bot.outputs.review_output }}

            <!-- 원본 코멘트 ID: ${{ github.event.comment.id }} -->
          edit-mode: replace

      # pull_request_review_comment 이벤트인 경우 - 찾아서 업데이트 또는 새로 생성
      - name: Find Existing Comment for review_comment
        if: github.event_name == 'pull_request_review_comment' && github.event.pull_request_review == null
        uses: peter-evans/find-comment@v2
        id: find-comment-review
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "라인 코멘트 ID: ${{ github.event.comment.id }}"

      - name: Create or Update Comment for review_comment
        if: github.event_name == 'pull_request_review_comment' && github.event.pull_request_review == null
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.find-comment-review.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **${{ github.event.comment.user.login }}님의 코드 리뷰 코멘트에 대한 응답:**

            > ${{ github.event.comment.body }}

            ${{ steps.pr-review-bot.outputs.review_output }}

            <!-- 라인 코멘트 ID: ${{ github.event.comment.id }} -->
          edit-mode: replace

      # pull_request_review 이벤트인 경우 - 찾아서 업데이트 또는 새로 생성
      - name: Find Existing Comment for review
        if: github.event_name == 'pull_request_review'
        uses: peter-evans/find-comment@v2
        id: find-comment-pr-review
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "리뷰 ID: ${{ github.event.review.id }}"

      - name: Create or Update Comment for review
        if: github.event_name == 'pull_request_review'
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.find-comment-pr-review.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            @${{ github.event.review.user.login }}님의 리뷰에 대한 응답입니다.

            ${{ steps.pr-review-bot.outputs.review_output }}

            <!-- 리뷰 ID: ${{ github.event.review.id }} -->
          edit-mode: replace

      # pull_request 이벤트인 경우 - 그냥 실행
      - name: Run PR Review Bot Directly for pull_request events
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AI_PROVIDER: "openrouter"
        run: npx autopr review-bot
