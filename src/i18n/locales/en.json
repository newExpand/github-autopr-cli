{
  "commands": {
    "collaborator": {
      "description": "Manage collaborators for the repository",
      "invite": {
        "description": "Invite a collaborator to the repository"
      },
      "list": {
        "description": "List all collaborators of the repository",
        "title": "Collaborators:",
        "item": "- @{{username}} ({{permission}})"
      },
      "remove": {
        "description": "Remove collaborators from the repository"
      },
      "status": {
        "description": "Check invitation status for a collaborator",
        "no_invitation": "No invitation found for @{{username}}",
        "no_invitations": "No pending invitations found",
        "info": "@{{username}}: {{status}} (invited: {{invitedAt}}, expires: {{expiresAt}})",
        "all_title": "Invitation statuses:",
        "pending": "Pending",
        "accepted": "Accepted",
        "expired": "Expired"
      },
      "status_all": {
        "description": "Check all invitation statuses"
      },
      "no_collaborators": "No collaborators found for this repository",
      "prompts": {
        "permission": "Select permission level:",
        "select_to_remove": "Select collaborators to remove:",
        "confirm_remove_multiple": "Remove {{count}} selected collaborator(s)?"
      },
      "permissions": {
        "pull": "Read",
        "push": "Write",
        "admin": "Admin"
      },
      "success": {
        "invited": "Successfully invited @{{username}} as a collaborator",
        "removed": "Successfully removed @{{username}} as a collaborator",
        "all_removed": "Successfully removed all selected collaborators",
        "cancelled": "Operation cancelled"
      }
    },
    "commit": {
      "description": "Create a commit with AI assistance",
      "args": {
        "subcommand": "Subcommand to execute (improve)",
        "message": "Commit message or message to improve"
      },
      "options": {
        "all_with_push": "Stage all changes and push after commit",
        "patch": "Use patch mode for staging",
        "select": "Select files to stage",
        "select_with_push": "Select files to stage and push after commit"
      },
      "help": {
        "examples": "Examples",
        "default": "Interactive commit",
        "all_with_push": "Stage all changes and push",
        "select": "Select files to stage",
        "select_with_push": "Select files, commit, and push",
        "improve_last": "Improve last commit message",
        "improve_message": "Improve provided commit message",
        "improve_all_with_push": "Improve message, stage all, and push",
        "improve_select_with_push": "Improve message, select files, and push"
      },
      "error": {
        "staging_failed": "Failed to stage changes",
        "files_failed": "Failed to get changed files",
        "file_selection_failed": "Failed to select files",
        "diff_failed": "Failed to get staged diff",
        "get_branch_failed": "Failed to get current branch",
        "no_staged_changes": "No staged changes found",
        "no_commit_message": "No commit message found",
        "invalid_subcommand": "Invalid subcommand",
        "push_failed": "Push failed: {{error}}",
        "commit_failed": "Failed to commit changes"
      },
      "info": {
        "patch_mode": "Running in patch mode. Please run 'git add -p' manually",
        "no_unstaged_files": "No unstaged files found",
        "no_files_selected": "No files selected",
        "run_patch_mode": "Please run 'git add -p' manually to stage changes",
        "improving_message": "Improving commit message...",
        "analyzing_changes": "Analyzing changes...",
        "suggested_message": "Suggested commit message:",
        "operation_cancelled": "Operation cancelled",
        "pr_creation_guide": "To create a pull request for your changes:",
        "run_new_command": "Run 'autopr new' to create a new pull request"
      },
      "success": {
        "files_staged": "{{count}} files staged",
        "pushed": "Successfully pushed to {{branch}}",
        "committed": "Changes committed successfully"
      },
      "warning": {
        "pr_check_failed": "Failed to check for existing PR"
      },
      "prompts": {
        "select_files": "Select files to stage:",
        "use_message": "Use this commit message?",
        "edit_message": "Edit commit message:"
      }
    },
    "daily_report": {
      "description": "Generate a daily commit report",
      "title": "Daily Commit Report",
      "date_single": "Date: {{date}}",
      "date_range": "Date Range: {{from}} to {{to}}",
      "user": "User: {{username}}",
      "ai_summary": "AI Summary",
      "summary": "Summary",
      "total_commits": "Total Commits: {{count}}",
      "files_changed": "Files Changed: {{count}}",
      "lines_added": "Lines Added: {{count}}",
      "lines_deleted": "Lines Deleted: {{count}}",
      "hourly_distribution": "Hourly Distribution",
      "branch_distribution": "Branch Distribution",
      "file_types": "File Types",
      "fetching_commit_dates": "Fetching commit dates...",
      "no_commit_dates": "No commit dates found",
      "select_date": "Select date:",
      "fetching": "Fetching commits for {{username}} on {{date}}...",
      "report_saved": "Report saved to: {{path}}",
      "options": {
        "username": "Specify GitHub username",
        "format": "Output format (console, json, markdown)",
        "date": "Specify date (YYYY-MM-DD)",
        "output": "Save report to file"
      },
      "error": {
        "commit_dates_failed": "Failed to get commit dates",
        "user_not_found": "User not found",
        "local_commits_failed": "Failed to get local commits",
        "ai_generation_failed": "Failed to generate AI summary",
        "ai_fallback": "AI summary generation failed. Check logs for details.",
        "ai_init_failed": "Failed to initialize AI",
        "ai_required": "AI is required for this feature"
      },
      "debug": {
        "using_github_user": "Using GitHub username: {{username}}",
        "github_user_failed": "Failed to get GitHub username",
        "using_git_user": "Using Git username: {{username}}"
      }
    },
    "init": {
      "description": "Initialize autopr configuration",
      "info": {
        "branch_strategy": "Branch strategy set up successfully",
        "production_branch_set": "Production branch set to: {{branch}}",
        "development_branch_set": "Development branch set to: {{branch}}",
        "release_template_set_automatically": "Release PR template set automatically",
        "hooks_setup_automatically": "Git hooks set up automatically"
      },
      "error": {
        "git_hooks": "Failed to set up Git hooks: {{error}}",
        "invalid_token": "Invalid GitHub token"
      },
      "prompts": {
        "update_token": "A GitHub token is already configured. Update it?",
        "auth_method": "How would you like to authenticate with GitHub?",
        "auth_choices": {
          "oauth": "Use OAuth (browser-based authentication)",
          "manual": "Enter token manually"
        },
        "token": "Enter your GitHub token:",
        "update_language": "Current language is {{language}}. Update it?",
        "language": "Select language:",
        "setup_ai": "Set up AI features?",
        "default_branch": "Default (production) branch:",
        "development_branch": "Development branch:",
        "reviewers": "Default reviewers (comma-separated):"
      }
    },
    "lang": {
      "description": "Set or view the language settings",
      "argument": {
        "language_code": "Language code (e.g. en, ko)"
      },
      "error": {
        "unsupported": "Unsupported language: {{language}}",
        "supported_list": "Supported languages: {{languages}}"
      },
      "success": {
        "changed": "Language changed to {{language}}",
        "current": "Current language: {{language}}"
      }
    },
    "list": {
      "description": "List pull requests",
      "open_prs": "Open Pull Requests:",
      "closed_prs": "Closed Pull Requests:",
      "all_prs": "All Pull Requests:",
      "no_prs": "No pull requests found",
      "author": "Author: @{{login}}",
      "status": "Status: {{status}}",
      "merge_status": "Merge status: {{status}}",
      "state": "State: {{state}}",
      "merged_info": "This PR was merged",
      "url": "URL: {{url}}",
      "loading_more": "Loading more PRs (page {{page}})...",
      "max_pages_reached": "Maximum page limit reached (10 pages)",
      "no_more_prs": "No more pull requests found",
      "states": {
        "open": "Open",
        "closed": "Closed",
        "all": "All",
        "merged": "Merged"
      },
      "actions": {
        "review": "Review",
        "merge": "Merge",
        "update": "Update",
        "reopen": "Reopen",
        "open": "Open in Browser",
        "cancel": "Cancel"
      },
      "prompts": {
        "select_state": "Select PR state to display:",
        "select_count": "How many PRs do you want to see?",
        "try_another_state": "No PRs found with this state. Would you like to try another state?",
        "load_more": "There might be more PRs. Load more?",
        "load_more_again": "Would you like to load more PRs?",
        "want_to_select": "Would you like to select a PR for an action?",
        "select_pr": "Select a PR:",
        "action": "What would you like to do with this PR?"
      },
      "success": {
        "cancelled": "Operation cancelled"
      }
    },
    "review": {
      "description": "Review a pull request",
      "error": {
        "browser_open_failed": "Failed to open browser: {{error}}",
        "pr_closed": "This PR is closed or merged",
        "files_failed": "Failed to get changed files",
        "file_content_failed": "Failed to get content for file: {{file}}",
        "comment_required": "Comment is required",
        "submit_failed": "Failed to submit review",
        "checkout_failed": "Failed to checkout PR: {{error}}"
      },
      "warning": {
        "file_too_large": "File {{file}} is too large to process",
        "no_changes": "No changes found in this pull request"
      },
      "info": {
        "title": "Pull Request Information:",
        "author": "Author: {{author}}",
        "status": "Status: {{status}}",
        "merge_status": "Merge status: {{status}}",
        "url": "URL: {{url}}",
        "file_stats": "Files: {{total}} total, {{processed}} processed | Changes: +{{additions}} -{{deletions}} ({{changes}} total) | Branches: {{base_branch}} ← {{head_branch}}",
        "ai_review_start": "Starting AI code review..."
      },
      "status": {
        "draft": "Draft",
        "ready": "Ready for review",
        "checking": "Checking",
        "conflicting": "Conflicts",
        "mergeable": "Ready to merge",
        "unknown": "Unknown"
      },
      "prompts": {
        "action": "What would you like to do?",
        "review_type": "Select review type:",
        "comment": {
          "approve": "Add approval comment:",
          "request_changes": "Describe requested changes:",
          "comment": "Add review comment:"
        }
      },
      "actions": {
        "view": "View PR description",
        "ai_review": "AI code review",
        "review": "Submit review",
        "checkout": "Checkout PR branch",
        "open": "Open in browser",
        "cancel": "Cancel"
      },
      "content": {
        "title": "Pull Request Description:",
        "empty": "(No description provided)",
        "ai_review_title": "AI Code Review:"
      },
      "review_types": {
        "approve": "Approve",
        "request_changes": "Request Changes",
        "comment": "Comment"
      },
      "success": {
        "opened": "Pull request opened in browser",
        "checkout": "Successfully checked out PR branch",
        "cancelled": "Operation cancelled"
      }
    },
    "reopen": {
      "description": "Reopen a closed pull request",
      "error": {
        "merged": "Cannot reopen a merged pull request",
        "already_open": "This pull request is already open",
        "cannot_reopen": "Cannot reopen this pull request"
      },
      "success": {
        "reopened": "Pull request #{{number}} reopened successfully"
      }
    },
    "merge": {
      "description": "Merge a pull request",
      "info": {
        "title": "Pull Request Information",
        "branch_info": "Branch Information",
        "pr_branch": "PR Branch: {{branch}}",
        "target_branch": "Target Branch: {{branch}}",
        "author": "Author: {{author}}",
        "checking_conflicts": "Checking for conflicts..."
      },
      "conflict": {
        "found": "Conflicts detected in this pull request",
        "none": "No conflicts detected",
        "resolve_guide": "Conflict Resolution Guide",
        "files_with_conflicts": "Files with conflicts ({{count}})",
        "git_commands": "Git Commands for Conflict Resolution",
        "resolution_steps": "Follow these steps to resolve the conflicts:\n1. Edit each conflicting file to resolve the conflicts\n2. After resolving all conflicts, stage the changes with 'git add'\n3. Commit the resolution with 'git commit'\n4. Push the changes with 'git push'\n5. Run 'autopr merge' command again",
        "marker_explanation": "Understanding conflict markers:",
        "your_changes": "Your changes (current branch)",
        "divider": "Divider between versions",
        "incoming_changes": "Incoming changes (target branch)",
        "after_resolving": "After resolving all conflicts, run these commands:",
        "stage_changes": "Stage all resolved files",
        "commit_resolution": "Commit the resolution",
        "push_changes": "Push the changes",
        "retry_merge": "Retry the merge operation",
        "help_resources": "Additional resources for resolving conflicts:",
        "no_actual_conflicts": "No actual conflicts found, proceeding with merge",
        "ai_suggestion_start": "Analyzing conflicts with AI to provide resolution suggestions...",
        "ai_suggestions": "AI Suggestions for Conflict Resolution:",
        "use_ai_suggestions": "Would you like to follow these AI suggestions?",
        "manual_resolution": "Proceeding with manual conflict resolution",
        "ai_suggestion_failed": "Failed to generate AI suggestions for conflicts"
      },
      "error": {
        "branch_checkout_failed": "Failed to checkout PR branch",
        "conflict_check_failed": "Failed to check conflict in {{file}}: {{error}}",
        "base_change_failed": "Failed to change base branch",
        "cleanup_failed": "Failed to clean up after merge: {{error}}",
        "manual_cleanup": "Please clean up branches manually",
        "pr_closed": "This pull request is closed or merged",
        "not_mergeable": "This pull request cannot be merged",
        "merge_conflict": "Merge conflict detected"
      },
      "prompts": {
        "change_base": "Current target branch is {{branch}}. Would you like to change it?",
        "select_base": "Select new target branch:",
        "confirm_base_change": "Change target branch from {{from}} to {{to}}?",
        "merge_method": "Select merge method:",
        "commit_title": "Enter squash commit title:",
        "commit_message": "Enter squash commit message:",
        "delete_branch": "Delete branch after merging?",
        "confirm": "Confirm merge?"
      },
      "methods": {
        "merge": "Merge (preserve all commits)",
        "squash": "Squash (combine all commits)",
        "rebase": "Rebase (replay commits on target)"
      },
      "success": {
        "cancelled": "Operation cancelled",
        "base_changed": "Target branch changed to {{branch}}",
        "merged": "Pull request successfully merged"
      },
      "cleanup": {
        "start": "Cleaning up after merge...",
        "updating_base_branch": "Updating base branch {{branch}}",
        "switching_to_base": "Switching to base branch {{branch}}",
        "deleting_branch": "Deleting local branch {{branch}}",
        "branch_deleted": "Local branch deleted",
        "branch_already_deleted": "Branch already deleted",
        "deleting_remote_branch": "Deleting remote branch",
        "syncing_with_remote": "Syncing with remote",
        "complete": "Cleanup complete"
      },
      "warning": {
        "base_branch_not_found": "Base branch {{branch}} not found locally"
      }
    },
    "new": {
      "description": "Create a new PR",
      "error": {
        "protected_branch": "Cannot create PR from protected branch {{branch}}. Develop on {{development}} branch, release on {{production}} branch.",
        "push_failed": "Failed to push branch to remote: {{error}}",
        "diff_failed": "Failed to get diff content",
        "files_failed": "Failed to get changed files list",
        "create_failed": "Failed to create PR: {{error}}"
      },
      "warning": {
        "ai_title_failed": "Failed to generate PR title with AI",
        "ai_description_failed": "Failed to generate PR description with AI",
        "ai_initialization_failed": "Failed to initialize AI",
        "draft_not_available": "Draft PR feature is not available for this repository (requires GitHub paid plan for private repos)",
        "file_read_failed": "Failed to read file {{file}}",
        "code_review_failed": "Failed to run code review",
        "line_review_failed": "Failed to run line-by-line code review",
        "no_files_for_review": "No files to review",
        "code_review_add_failed": "Failed to add code review comments to PR"
      },
      "info": {
        "creating": "Creating PR...",
        "pr_exists": "PR #{{number}} already exists",
        "adding_reviewers": "Adding reviewers...",
        "reviewers_added": "Reviewers added: {{reviewers}}",
        "generating_title": "Generating PR title with AI...",
        "generated_title": "Generated title:",
        "generating_description": "Generating PR description with AI...",
        "generated_description": "Generated description:",
        "ai_initialized": "AI initialized successfully",
        "running_code_review": "Running overall code review...",
        "code_review_completed": "Code review completed",
        "running_line_by_line_review": "Running line-by-line code review...",
        "line_by_line_review_completed": "Line-by-line code review completed",
        "no_line_comments": "No issues automatically detected",
        "no_review_comments": "No code review comments to add",
        "adding_code_review": "Adding code review to PR...",
        "running_pr_review": "Running PR review...",
        "pr_review_completed": "PR review completed"
      },
      "prompts": {
        "title": "PR title:",
        "body": "PR description:",
        "reviewers": "Reviewers (comma-separated):",
        "update_existing": "Update existing PR?",
        "create_as_draft": "Create as draft PR?",
        "use_ai_description": "Use AI-generated description?",
        "edit_ai_description": "Edit AI-generated description?",
        "run_code_review": "Run overall code review?",
        "run_line_by_line_review": "Run line-by-line code review for typos, security issues, and potential bugs?",
        "add_review_comments": "Add code review comments to PR?",
        "run_pr_review": "Run comprehensive PR review?"
      },
      "success": {
        "branch_pushed": "Branch {{branch}} pushed to remote",
        "pr_updated": "PR #{{number}} updated successfully",
        "cancelled": "PR creation cancelled",
        "code_review_added": "Code review comments added to PR"
      }
    },
    "reviewer_group": {
      "description": "Manage reviewer groups",
      "add": {
        "description": "Add a new reviewer group",
        "argument": {
          "name": "Name of the reviewer group"
        },
        "option": {
          "members": "Comma-separated list of group members",
          "strategy": "Rotation strategy (default: round-robin)"
        },
        "error": {
          "duplicate_name": "A reviewer group with the name '{{name}}' already exists"
        },
        "success": "Successfully added reviewer group '{{name}}'"
      },
      "remove": {
        "description": "Remove a reviewer group",
        "argument": {
          "name": "Name of the reviewer group to remove"
        },
        "error": {
          "not_found": "Reviewer group '{{name}}' not found"
        },
        "success": "Successfully removed reviewer group '{{name}}'"
      },
      "update": {
        "description": "Update an existing reviewer group",
        "argument": {
          "name": "Name of the reviewer group to update"
        },
        "option": {
          "members": "Comma-separated list of group members",
          "strategy": "Rotation strategy"
        },
        "error": {
          "not_found": "Reviewer group '{{name}}' not found"
        },
        "success": "Successfully updated reviewer group '{{name}}'"
      },
      "list": {
        "description": "List all reviewer groups",
        "no_groups": "No reviewer groups found",
        "group_info": "Group: {{name}} | Members: {{members}} | Strategy: {{strategy}}"
      }
    },
    "update": {
      "description": "Update a pull request",
      "info": {
        "title": "Pull Request Information",
        "current_status": "Current Status: {{status}}"
      },
      "prompts": {
        "action": "What would you like to update?",
        "new_title": "Enter new title:",
        "new_body": "Enter new description:",
        "new_status": "Select new status:"
      },
      "actions": {
        "title": "Title",
        "body": "Description",
        "status": "Status"
      },
      "status": {
        "draft": "Draft",
        "ready": "Ready for review"
      },
      "success": {
        "cancelled": "Update cancelled",
        "all": "Pull request updated successfully"
      }
    },
    "hook": {
      "description": "Git hook management",
      "post_checkout": {
        "description": "Post-checkout hook handler",
        "argument": {
          "branch": "Branch name"
        },
        "info": {
          "new_branch": "You've checked out to a new branch",
          "push_instruction": "After making changes, push your branch with 'git push -u origin {{branch}}'",
          "regular_pr": "Then create a regular pull request using 'autopr new'",
          "auto_pr": "A draft pull request will be created automatically when you push",
          "manual_pr_required": "This repository doesn't support draft PRs. Please create a PR manually with 'autopr new'",
          "draft_created": "A draft pull request was created successfully"
        }
      }
    },
    "github_app": {
      "description": "Manage GitHub App settings",
      "auth": {
        "description": "Manage GitHub App authentication",
        "initializing": "Initializing GitHub App device flow",
        "instructions": "Follow these steps to complete GitHub App authentication:",
        "open_url": "Open this URL in your browser: {{url}}",
        "enter_code": "Enter this code: {{code}}",
        "waiting": "Waiting for browser authentication to complete...",
        "time_limit": "(Time limit: {{minutes}} minutes)",
        "browser_open_failed": "Failed to open browser automatically. Please open the URL manually.",
        "starting": "Starting GitHub App authentication process",
        "success": "GitHub App authentication successful!",
        "failed": "GitHub App authentication failed: {{error}}"
      },
      "setup": {
        "description": "Set up GitHub App authentication",
        "private_key_prompt": "Enter the path to your private key file (or press enter to skip)",
        "starting": "Setting up GitHub App",
        "info": "Setting up GitHub App authentication",
        "multiple_installations": "Multiple GitHub App installations found.",
        "success": "GitHub App configuration saved successfully"
      },
      "info": {
        "description": "Show GitHub App configuration information",
        "title": "GitHub App Configuration",
        "app_id": "App ID: {{id}}",
        "installation_id": "Installation ID: {{id}}",
        "has_private_key": "Has private key: {{hasKey}}",
        "not_configured": "GitHub App is not yet configured. Please run 'autopr github-app setup' first",
        "success": "Successfully fetched GitHub App information",
        "failed": "Failed to fetch GitHub App information: {{error}}"
      },
      "reset": {
        "description": "Reset GitHub App configuration",
        "confirm": "Are you sure you want to reset the GitHub App configuration? This will remove all GitHub App settings.",
        "confirm_true": "Yes, reset it",
        "success": "GitHub App configuration reset successfully",
        "failed": "Failed to reset GitHub App configuration: {{error}}"
      },
      "private_key": {
        "description": "Import private key file for GitHub App",
        "prompt": "Enter the path to your private key file:",
        "success": "Private key successfully registered",
        "failed": "Failed to register private key: {{error}}",
        "no_config": "GitHub App is not yet configured. Please run 'autopr github-app setup' first"
      },
      "device_flow": {
        "client_id": "Client ID: {{clientId}}",
        "request_data": "Request data:",
        "response_status": "Response status:",
        "response_headers": "Response headers:",
        "error_response": "Error response content:",
        "response_data": "Response data:",
        "init_failed": "Device flow initialization failed: {{status}} - {{error}}",
        "initializing": "Initializing GitHub App device flow"
      },
      "token": {
        "error": "Token error: {{error}}",
        "expired": "Authentication token expired. Please try again.",
        "missing": "Token not found",
        "request_failed": "Token request failed: {{status}}"
      },
      "error": {
        "missing_config": "GitHub App configuration is missing",
        "missing_installation_id": "GitHub App installation ID is missing",
        "token_request_failed": "Installation token request failed: {{status}}",
        "token_missing": "No token in installation token response",
        "list_installations_failed": "Failed to list installations: {{status}}",
        "no_installations": "No GitHub App installations found",
        "app_info_failed": "Failed to get GitHub App information: {{status}}",
        "installation_verification_failed": "Failed to verify GitHub App installation",
        "installation_cancelled": "GitHub App installation was cancelled",
        "private_key_required": "GitHub App private key is required for this operation. Please run 'autopr github-app setup' to set up your private key."
      }
    }
  },
  "common": {
    "error": {
      "github_token": "GitHub token not found. Please run 'autopr init' first",
      "not_git_repo": "Not a git repository",
      "unknown": "An unknown error occurred",
      "config_load_failed": "Failed to load configuration",
      "no_commits": "No commits found between branches",
      "pr_exists": "A pull request already exists for this branch",
      "base_modified": "Base branch was modified. Please pull the latest changes",
      "get_invitation_status": "Failed to get invitation status: {{error}}",
      "get_invitation_statuses": "Failed to get invitation statuses: {{error}}",
      "get_conflicts": "Failed to get pull request conflicts: {{error}}"
    },
    "success": {
      "init": "Initialization completed successfully",
      "pr_created": "Pull request created successfully",
      "review_submitted": "Review submitted successfully"
    },
    "cli": {
      "description": "GitHub PR automation tool with AI assistance"
    },
    "branch_pattern": {
      "match_success": "Branch '{{branch}}' matches pattern '{{pattern}}'",
      "match_fail": "Branch '{{branch}}' does not match pattern '{{pattern}}'",
      "no_config": "No configuration found",
      "matching_start": "Starting to match branch patterns",
      "current_branch": "Current branch: {{branch}}",
      "available_patterns": "Available branch patterns:",
      "pattern_item": "- Pattern: {{pattern}}, Type: {{type}}",
      "matched_pattern": "Found matching branch pattern",
      "pattern_info": "Pattern: {{pattern}}, Type: {{type}}, Draft: {{draft}}, Labels: {{labels}}, Template: {{template}}",
      "no_match": "No matching branch pattern found",
      "yes": "Yes",
      "no": "No",
      "none": "None",
      "default": "Default"
    },
    "template": {
      "default": {
        "changes": "## Changes",
        "changes_placeholder": "- Describe your changes here",
        "tests": "## Tests",
        "unit_test": "- [ ] Unit tests",
        "integration_test": "- [ ] Integration tests",
        "reviewer_checklist": "## Reviewer Checklist",
        "code_clarity": "- [ ] Code is clear and understandable",
        "test_coverage": "- [ ] Tests cover the changes appropriately",
        "performance": "- [ ] Performance considerations addressed"
      }
    },
    "warning": {
      "invalid_reviewers": "The following reviewers are invalid: {{reviewers}}",
      "merge_conflict": "Merge conflicts detected in this pull request",
      "merge_status_unknown": "Merge status is unknown, please check later",
      "branch_delete_failed": "Failed to delete the remote branch, you may need to delete it manually"
    }
  },
  "ai": {
    "initialization": {
      "success": "AI initialized successfully"
    },
    "error": {
      "not_initialized": "Failed to initialize AI",
      "code_review_failed": "Failed to perform AI code review",
      "pr_description_failed": "Failed to generate PR description",
      "pr_title_failed": "Failed to generate PR title",
      "conflict_resolution_failed": "Failed to generate conflict resolution suggestion",
      "commit_message_failed": "Failed to improve commit message",
      "daily_report_failed": "Failed to generate daily report summary",
      "line_review_failed": "Failed to perform line-by-line code review",
      "pr_review_failed": "Failed to perform comprehensive PR review"
    }
  },
  "config": {
    "error": {
      "load_global_failed": "Failed to load global configuration: {{error}}",
      "load_project_failed": "Failed to load project configuration: {{error}}",
      "save_global_failed": "Failed to save global configuration: {{error}}",
      "save_project_failed": "Failed to save project configuration: {{error}}"
    }
  }
} 